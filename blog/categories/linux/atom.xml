<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mengz You's blogger.]]></title>
  <link href="http://youmz.cn/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://youmz.cn/"/>
  <updated>2014-06-13T08:22:44+00:00</updated>
  <id>http://youmz.cn/</id>
  <author>
    <name><![CDATA[Mengz You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【翻译】如何在Unix Shell脚本中使用ftp下载文件]]></title>
    <link href="http://youmz.cn/blog/2013/01/15/translate-how-do-I-ftp-in-shell.html"/>
    <updated>2013-01-15T21:33:20+00:00</updated>
    <id>http://youmz.cn/blog/2013/01/15/translate-how-do-I-ftp-in-shell</id>
    <content type="html"><![CDATA[<p>【原文】<a href="http://www.thegeekstuff.com/2010/12/how-do-i-ftp-and-download-files-from-a-unix-shell-script/">How Do I ftp and Download files from a UNIX Shell Script</a></p>

<p>问题：我想在一个shell脚本内执行ftp，在脚本内部就提供用户名和密码来下载文件。你能给我解释下怎么样在shell脚本中执行这个任务吗？ <br/>
答：为了在批量模式下用ftp下载/上传文件，你可以从命令行使用称为“<a href="http://en.wikipedia.org/wiki/Here_document">HERE document</a>”的FTP脚本，或者像下面说的一样在脚本中调用FTP。</p>

<!-- more -->


<p></p>

<h4>使用 “HERE document” 的 FTP 脚本</h4>

<blockquote><p>\$ ftp -in URL &lt;&lt; SCRIPTEND <br/>
user USERNAME PASSWORD <br/>
binary <br/>
cd PATH <br/>
mget PATH <br/>
SCRIPTEND</p></blockquote>

<p>在上面的ftp脚本中： <br/>
*   ftp : ftp命令 <br/>
*   -i : 不用交互式提示 <br/>
*   -n : 不用自动登录 <br/>
*   user USERNAME PASSWORD : 使用提供的用户名和密码登录 <br/>
*   binary : 为二进制文件传输设置模式 <br/>
*   cd PATH : 在远程机器上改变目录 <br/>
*   mget PATH : 获取指定文件 <br/>
*   SCRIPTEND : 指定 “HERE document” 开始和结束的标记“HERE document”用来为命令提供输入，请参考<a href="http://en.wikipedia.org/wiki/Here_document">HERE document</a>。</p>

<h4>在Shell脚本中使用 FTP 脚本</h4>

<p>下面是一个简单的例子用来从FTP服务器下载一个tar文件</p>

<blockquote><p>\$ cat download.sh <br/>
ftp -in mirrors.issp.co.th &lt;&lt; SCRIPTEND <br/>
user anonymous <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#116;&#101;&#x73;&#116;&#64;&#116;&#101;&#x73;&#x74;&#x2e;&#x63;&#x6f;&#109;">&#x74;&#101;&#x73;&#116;&#64;&#x74;&#x65;&#115;&#x74;&#x2e;&#99;&#111;&#109;</a> <br/>
binary <br/>
cd cpan/authors/id/P/PM/PMQS/ <br/>
mget Compress-Raw-Bzip2-2.027.tar.gz <br/>
SCRIPTEND</p></blockquote>

<p>执行这个脚本来下载文件</p>

<blockquote><p>\$ sh download.sh <br/>
\$ ls
download.sh <br/>
Compress-Raw-Bzip2-2.027.tar.gz</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在openSUSE上使用3G数据卡]]></title>
    <link href="http://youmz.cn/blog/2013/01/15/use-data-card-on-opensuse.html"/>
    <updated>2013-01-15T13:33:20+00:00</updated>
    <id>http://youmz.cn/blog/2013/01/15/use-data-card-on-opensuse</id>
    <content type="html"><![CDATA[<p>今天这篇是因为想把怎么成功连上网的过程给记录下来。真应该感谢家里的宽带坏掉了，还有手里正好有一个华为的联通3G数据上网卡，所以就折腾了一下，这都是废话了！</p>

<h3>工具准备</h3>

<p>首先要保证系统里已经安装<a href="http://software.opensuse.org/package/usb_modeswitch">usb_modeswitch</a>和<a href="http://software.opensuse.org/package/wvdial">wvdial</a>这两个包，因为我们要使用这两个命令，一个是用来切换 usb 模式的，一个是用来拨号的。</p>

<!-- more -->


<p></p>

<h3>切换上网卡usb模式</h3>

<p>插入华为的 3g 联通数据上网卡（我这个的型号是 HUAWEI E261），使用如下 lsusb 命令查看信息:</p>

<blockquote><p># lsusb | grep &ldquo;Huawei&rdquo; <br/>
Bus 002 Device 003: ID 12d1:1436 Huawei Technologies Co., Ltd.</p></blockquote>

<p>记录下 ID，也就是 12d1:1436 ，一个厂商号，一个设备号。
然后使用如下命令将切换 usb 模式：</p>

<blockquote><p># usb_modeswitch –default-vendor 0x12d1 –default-product 0×1436 –target-vendor 0x12d1 –target-product 0×1436 –huawei-mode</p>

<p>Looking for target devices … <br/>
found matching product ID <br/>
adding device <br/>
Found devices in target mode or class (1) <br/>
Looking for default devices … <br/>
found matching product ID <br/>
adding device <br/>
Found device in default mode, class or configuration (1) <br/>
Accessing device 003 on bus 002 … <br/>
Getting the current device configuration … <br/>
OK, got current device configuration (1) <br/>
Using first interface: 0×00 <br/>
Using endpoints 0×01 (out) and 0×82 (in) <br/>
Not a storage device, skipping SCSI inquiry</p>

<p>USB description data (for identification) <br/>
————————-
Manufacturer: HUAWEI Technology <br/>
Product: HUAWEI Mobile <br/>
Serial No.: not provided <br/>
————————- <br/>
Sending Huawei control message … <br/>
OK, Huawei control message sent <br/>
&ndash;> Run lsusb to note any changes. Bye.</p></blockquote>

<p>然后，</p>

<blockquote><p># ls /dev/ttyUSB* <br/>
/dev/ttyUSB0 /dev/ttyUSB1 /dev/ttyUSB2</p></blockquote>

<p>已经有了3个 ttyUSB 设备。</p>

<h3>配置wvdial</h3>

<p>运行下面的命令来生成 wvdial 的配置文件：</p>

<blockquote><p># wvdialconf <br/>
Editing `/etc/wvdial.conf’.</p>

<p>Scanning your serial ports for a modem.</p>

<p>Modem Port Scan&lt;*1>: S0 S1 S2 S3 S4 S5 S6 S7 <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 — OK <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 Z — OK <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 S0=0 — OK <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 — OK <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 — OK <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 — OK <br/>
ttyUSB0&lt;*1>: Modem Identifier: ATI — Manufacturer: huawei <br/>
ttyUSB0&lt;*1>: Speed 9600: AT — OK <br/>
ttyUSB0&lt;*1>: Max speed is 9600; that should be safe. <br/>
ttyUSB0&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 — OK <br/>
ttyUSB1&lt;*1>: ATQ0 V1 E1 — failed with 2400 baud, next try: 9600 baud <br/>
ttyUSB1&lt;*1>: ATQ0 V1 E1 — failed with 9600 baud, next try: 9600 baud <br/>
ttyUSB1&lt;*1>: ATQ0 V1 E1 — and failed too at 115200, giving up. <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 — OK <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 Z — OK <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 S0=0 — OK <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 — OK <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 — OK <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 — OK <br/>
ttyUSB2&lt;*1>: Modem Identifier: ATI — Manufacturer: huawei <br/>
ttyUSB2&lt;*1>: Speed 9600: AT — OK <br/>
ttyUSB2&lt;*1>: Max speed is 9600; that should be safe. <br/>
ttyUSB2&lt;*1>: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 — OK</p>

<p>Found a modem on /dev/ttyUSB0. <br/>
Modem configuration written to /etc/wvdial.conf. <br/>
ttyUSB0: Speed 9600; init “ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0″ <br/>
ttyUSB2: Speed 9600; init “ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0″</p></blockquote>

<p>可以看到，配置文件在<em>/etc/wvdial.conf</em>，然后修改一下该文件，我修改后的文件内容如下:</p>

<blockquote><p># cat /etc/wvdial.conf</p>

<p>[Dialer Defaults] <br/>
Init1 = ATZ <br/>
Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 <br/>
Modem = /dev/ttyUSB0 <br/>
Phone = *99# <br/>
Idle Seconds = 300 <br/>
Modem Type = Analog Modem <br/>
Stupid Mode = 1 <br/>
Compuserve = 0 <br/>
Baud = 9600 <br/>
Auto DNS = 1 <br/>
Dial Command = ATDT <br/>
Ask Password = 0 <br/>
ISDN = 0 <br/>
Password = any <br/>
Username = any</p></blockquote>

<h3>拨号上网</h3>

<p>接下来就直接运行 wvdial 拨号：</p>

<blockquote><p># wvdial <br/>
–> WvDial: Internet dialer version 1.60 <br/>
–> Initializing modem. <br/>
–> Sending: ATZ <br/>
ATZ <br/>
OK <br/>
–> Sending: ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 <br/>
ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 <br/>
OK <br/>
–> Modem initialized. <br/>
–> Idle Seconds = 300, disabling automatic reconnect. <br/>
–> Sending: ATDT*99# <br/>
–> Waiting for carrier. <br/>
ATDT*99# <br/>
CONNECT <br/>
–> Carrier detected. Starting PPP immediately. <br/>
–> Starting pppd at Mon Jan 13 23:46:44 2013 <br/>
–> Pid of pppd: 32212 <br/>
–> Using interface ppp0 <br/>
–> pppd: [1e][7f] <br/>
–> pppd: [1e][7f] <br/>
–> pppd: [1e][7f] <br/>
–> pppd: [1e][7f] <br/>
–> pppd: [1e][7f] <br/>
–> local IP address 172.20.197.35 <br/>
–> pppd: [1e][7f] <br/>
–> remote IP address 10.64.64.64 <br/>
–> pppd: [1e][7f] <br/>
–> primary DNS address 202.106.195.68 <br/>
–> pppd: [1e][7f] <br/>
–> secondary DNS address 202.106.46.151 <br/>
–> pppd: [1e][7f] <br/>
–> Script /etc/ppp/ip-up run successful <br/>
–> Default route Ok. <br/>
–> Nameserver (DNS) Ok. <br/>
–> Connected… Press Ctrl-C to disconnect <br/>
–> pppd: [1e][7f]</p></blockquote>

<p>可以看到已经设置了IP地址，和DNS服务器地址，也就是OK啦！！ <br/>
<strong>ifconfig</strong> 一下，可以看到如下的链接信息：</p>

<blockquote><p># ppp0 Link encap:Point-to-Point Protocol <br/>
inet addr:172.20.197.35 P-t-P:10.64.64.64 Mask:255.255.255.255 <br/>
UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 <br/>
RX packets:20496 errors:0 dropped:0 overruns:0 frame:0 <br/>
TX packets:18854 errors:0 dropped:0 overruns:0 carrier:0 <br/>
collisions:0 txqueuelen:3 <br/>
RX bytes:14708447 (14.0 Mb) TX bytes:2844560 (2.7 Mb)</p></blockquote>

<p>这样就大功告成啦! <br/>
最后，要感谢下<a href="http://home.cnblogs.com/u/shanlilang/">山里狼</a>的<a href="http://www.cnblogs.com/shanlilang/archive/2012/11/18/2776080.html">openSUSE简单配置</a>这篇文章，我也就是按照其指导弄的，虽然有些配置不太一样!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻译】简便安全地访问远程文件]]></title>
    <link href="http://youmz.cn/blog/2011/06/30/trans-accessing-remote-files-easily-and-securely.html"/>
    <updated>2011-06-30T05:58:46+00:00</updated>
    <id>http://youmz.cn/blog/2011/06/30/trans-accessing-remote-files-easily-and-securely</id>
    <content type="html"><![CDATA[<p>【原文】<a href="http://www.linuxjournal.com/content/accessing-remote-files-easy-and-secure">Accessing Remote Files Easily and Securely</a></p>

<p>安全shell – <a href="http://en.wikipedia.org/wiki/SSH">ssh</a>以及<a href="http://en.wikipedia.org/wiki/Secure_copy">scp</a>是我每天基本上都会用到的工具。当在多系统上工作时，不设置<a href="http://www.samba.org/">SAMBA</a>或者<a href="http://en.wikipedia.org/wiki/Network_File_System">NFS</a>就能在机器之间移动文件是非常便利的。而你所需要的就是打开安全shell守护进程 – <a href="http://www.openssh.com/">sshd</a> 。</p>

<!-- more -->


<p>在我们进入[sshfs][sshfs_site]的细节之前，让我们来快速看一下ssh 。安全shell守护进程默认运行的端口22上。它使得可以运行一个加密的shell交互。带上-Y选项，你可以运行<a href="http://www.x.org/">X11</a>转发机制，允许你在远程机器上运行X11等图形程序以及在你当前的终端上显示窗口。</p>

<p>你可以通过<em>/etc/ssh/sshd_config</em>(这个位置是在<a href="http://www.ubuntu.com/">ubuntu</a>系统上，不同发行版可能不同）文件来配置 <a href="http://www.openssh.com/">sshd</a>。这里，你可以禁用<em>root</em>访问旧的协议，<a href="http://www.x.org/">X11</a>转发等。一般的见解是，你限制越多的远程访问，你的系统对于潜在的攻击来说就越安全。如果你打算暴露你的<a href="http://www.openssh.com/">sshd</a>到英特网，你可能要调整你的<em>hosts.allow</em>和<em>hosts.deny</em>文件。有很多强化服务器和<a href="http://en.wikipedia.org/wiki/SSH">ssh</a>的指南，这里就不讲细节了。</p>

<p>要使用ssh，你需要安装sshd。在<a href="http://www.ubuntu.com/">Ubuntu</a>系统，也就是<strong>openssh-server</strong>包。为了外部访问，你也需要在路由器/防火墙使用端口22的转发你的<a href="http://www.whatismyip.com/">外部IP</a>。现在你需要使用你的普通用户权限登录到你的机器。</p>

<blockquote><p>$ ssh <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x75;&#x73;&#101;&#x72;&#x40;&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#46;&#x31;&#46;&#49;&#x30;&#48;">&#x75;&#115;&#x65;&#x72;&#64;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#46;&#49;&#x2e;&#x31;&#48;&#48;</a>   </br>
user@192.168.1.100′s password:</p></blockquote>

<p>输入密码，你就可以完全访问远程系统了。
便捷的安全拷贝命令 – scp，也以同样的方式工作。要拷贝<em>test.txt</em>文件到用户的远程主目录，简单地输入：</p>

<blockquote><p>$ scp test.txt user@192.168.1.100:</p></blockquote>

<p>你将会被提示输入密码。你也可以同样的拷贝远程系统的文件到本地。写明的命令演示了怎么样拷贝一个完全路径的文件到本地机器：</p>

<blockquote><p>$ scp user@192.168.1.100:/var/log/messages remote-message</p></blockquote>

<p>这两个命令意味着你可以自由地在机器之间拷贝文件。而[sshfs][sshfs_site]作为一个可以挂载的文件系统提供了这样的功能。在进入怎样设置sshfs之前，我们来快速看看什么是sshfs。</p>

<p>sshfs是用<a href="http://fuse.sourceforge.net/">FUSE</a>，以及依赖ssh的<a href="http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol">sftp</a>部分来访问远程机器。作为一个远程文件访问协议，sshfs不是非常好，例如，多用户同时写入同一文件，将造成损坏。而优点是继承了安全性和容易建立。</p>

<p>那么，怎么用呢？让我们来看一个非常简短的示例。</p>

<blockquote><p>$ sshfs user@192.168.1.100: remote-home   </br>
$ ls remote-home   </br>
Desktop  Documents  Downloads  Music  </br>
$ fusermount -u remote-home</p></blockquote>

<p>初始的sshfs命令挂载用户远程的主目录到<em>remote-home</em>。你可以在冒号后指定另一个路径来挂载远程文件系统的任何一个部分。访问仅仅受用户的访问权限限制。</p>

<p>在挂载的文件夹上使用ls或其他原始命令，就像远程主目录被本地挂载一样。所有的工具都工作，例如你可以登录到你的远程机器，使用你本地安装的构建工具构建软件。</p>

<p>要卸载文件系统，使用FUSE工具包中的<strong>fusermount</strong>命令。</p>

<p>总结，sshfs是一个容易建立的远程文件访问工具。如果涉及多个用户，它应该被小心使用。它使得可以易如反掌地临时访问远程文件系统，也方便从虚拟机挂载文件系统来访问和监视，也方便远程安装，编译和调试。总之，是我一直保留在我的工具箱中的工具之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻译】KDE 4.6 - 平台更新]]></title>
    <link href="http://youmz.cn/blog/2011/01/31/trans-kde-46-platform.html"/>
    <updated>2011-01-31T08:16:58+00:00</updated>
    <id>http://youmz.cn/blog/2011/01/31/trans-kde-46-platform</id>
    <content type="html"><![CDATA[<p>【原文】<a href="http://www.kde.org/announcements/4.6/platform.php">KDE Releases Development Platform 4.6.0</a></p>

<p>在上一篇中，介绍了KDE 4.6关于应用程序方面一些更新，现在我们来看看新的4.6平台给我们带来了什么样的更新。</p>

<p>Plasma工作空间和KDE应用程序构建于KDE平台之上，新的平台带来了应用于所有KDE应用的新功能。“移动构建目标”使为移动设备的开发更容易。Plasma框架支持用QML（描述性Qt语言）来写桌面小工具， 以及为数据交互提供了新的Javascript接口。KDE应用中基于元数据和语义搜索的技术-Nepomuk，现在提供了一个图形界面来备份和恢复数据。UPower，UDev和UDisks可以用来替换过时的HAL。还改进了蓝牙支持。改进了Oxygen小工具和风格设置以及一个为GTK应用的新Oxygen主题，它允许应用无缝地合并到Plasma工作空间，看起来就像是KDE应用程序。</p>

<!-- more -->


<h3>更容易的移动开发工具链</h3>

<p>由于KDE库更加模块化，部分KDE平台现在可以为移动和嵌入式目标系统构建。减少了交叉库的依赖，以及允许关闭某些功能，现在KDE框架很容易部署到移动设备。移动配置文件以及用于移动和平板版本的KDE应用程序，比如Kontact Touch–KDE 的移动办公套件，以及平板电脑和手持设备的Plasma用户接口。</p>

<h3>用QML来管理Plasma</h3>

<p>随着新版本的发布，Plasma框架支持用QML来写小工具。同时已经存在的小工具继续像之前一样可用。现在，QML是构建新的小工具的首选方法。Plasma数据引擎增加了新的功能，包括使用Javascript插件共享文件，一个允许数据引擎为离线使用缓存数据的存储服务。还有新的KPart，使得开发者更容易地集成这些新的和之前已存在的plasma技术到他们的应用中。</p>

<h3>支持UPower，UDev，UDisks和元数据备份</h3>

<p>由于新的UPower，UDev和UDisks后端，过时的HAL已经不再需要在Linux上管理硬件。使用这些新的后端，应该程序不需要被更新。在不支持UPower的系统上，HAL仍然可用。</p>

<p>KDE平台的语义桌面技术-Nepomuk，具备了备份和同步支持，使得在设备间传输元数据更容易。用户现在可以使用图形接口来备份他们的语义数据。附加的同步功能当钱只能在命令行模式可用。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-p01.png" alt="Semantic data can now be easily backed up and restored using a graphical interface" /></p>

<h3>KWin可脚本化，Oxygen-GTK增强交叉桌面集成</h3>

<p>KDE的窗口复合管理器-KWin，现在有了脚本接口。这让高级用户和分发者有更多的能力来在Plasma工作空间控制窗口的行为，例如可以设置窗口为“保持在上”直到它被最大化，当最大化时作为普通窗口将被覆盖，当非最大化时，又自动设置成“保持在上”。现 在，KWin小组正在为支持OpenGL-ES工作，希望能在2011年夏天的4.7版本中首次亮相，那时KWin将能在手持系统上使用。</p>

<p>Plasma平台的视觉组件-Oxygen，也扩大地与一整套重做的mimetype图标工作，<a href="http://hugo-kde.blogspot.com/2010/11/oxygen-gtk.html">Oxygen-GTK主题引擎</a>的介绍，使得GTK应用程序更好地与KDE Plasma工作空间集成，包括渐变和许多用户期盼的Oxygen功能。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-p02.png" alt="he Oxygen-GTK theme allows KDE and GTK applications to be mixed seamlessly" /></p>

<h3>新的蓝牙框架使得设备配对更容易</h3>

<p>一个著名的蓝牙框架-BlueDevil，使得设备配对和管理更容易。BlueDevil替代了KBluetooth，构建在BlueZ软件栈之上。</p>

<ul>
<li>现在你可以使用一个向导来配对设备</li>
<li>使用 Dolphin 或者 Konqueror 来浏览蓝牙设备上的文件</li>
<li>从 KDE 的系统管理或者系统托盘来管理蓝牙设置</li>
<li>新的框架监听接入请求，如接收文件或者输入 PIN 密码</li>
</ul>


<p>关于KDE 4.6在平台方面的更新就介绍到这。三篇关于KDE 4.6版本带来的新特性也介绍完啦！有兴趣尝试KDE的话，可以到 <a href="http://www.kde.org">KDE</a>了解更多信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻译】KDE 4.6 - 应用更新]]></title>
    <link href="http://youmz.cn/blog/2011/01/30/trans-kde-46-applications.html"/>
    <updated>2011-01-30T07:57:50+00:00</updated>
    <id>http://youmz.cn/blog/2011/01/30/trans-kde-46-applications</id>
    <content type="html"><![CDATA[<p>【原文】<a href="http://www.kde.org/announcements/4.6/applications.php">KDE Releases Applications 4.6.0</a></p>

<p>上一篇介绍了KDE 4.6在工作空间（Workspaces）方面的一些更新。这一篇，我们来看看在应用程序方面，KDE4.6带来了哪些更新。</p>

<p>很多 KDE 应用程序小组都发布了新的版本。特别的亮点包括： 在虚拟地球（Marble） 中选路能力的改进； 以及在 KDE 文件管理器（Dolhin）里使用文件元数据来过滤和搜索的改进。KDE 游戏集也带来了许多增强； 图片浏览器（Gwenview）和截屏程序（KSnapshot）具备了将图片及时分享到许多流行的社交网站的能力。下面来看看具体内容：</p>

<!-- more -->


<h3>Dolphin 添加了称为 Faceted 的浏览功能</h3>

<p>Kfind和Dolphin的搜索界面已经统一到了一个新的简单的搜索栏。Faceted浏览首次公开亮相了过滤面板的形式，这使得你可以轻松地使用文件的元数据索引它们。一个新的侧边烂允许层次搜索，也就是使用元数据作为额外过滤来增强传统的文件浏览。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/46-a05.png" alt="Dolphin's faceted browsing lets you use multiple filters to find files by metadata" /></p>

<ul>
<li>列视图改进了可用性。现在列的宽度可以自动或者由用户来调整，文件选择使用橡皮条指示，以及导航到临近的列不再需要水平滚动条了。</li>
<li>为了完成将 KDE 的开发从 SVN 迁移到 Git，Dolphin 新增了一个 Git 插件功能，可以直接从 GUI 更新和提交代码。 当然，SVN 插件仍然可用。</li>
<li>服务菜单多方面的改进（具体可以查看<a href="http://ppenz.blogspot.com/2010/11/improved-service-menus.html">http://ppenz.blogspot.com/2010/11/improved-service-menus.html</a>)</li>
</ul>


<h3>Kate 具备了SQL客户端功能</h3>

<p>Kate，强大的文本编辑器，这次发布带来了大量闪光的新的功能。特别地，新版本提供了如下功能：</p>

<ul>
<li>在Kate下一次启动时恢复未保存的本地文件（支持交换文件）</li>
<li>总是加载插件</li>
<li>添加脚本到菜单以及绑定快捷键</li>
<li>新的<a href="http://kate-editor.org/2010/07/29/katesql-a-new-plugin-for-kate/">SQL查询插件</a>给Kate带来了基本的 SQL 客户端的功能，以及通过Qt的SQL模块支持很多种类的数据库</li>
<li>一个新的 GNU 调式（GDB）插件</li>
<li>一个新的高亮选择文本插件</li>
</ul>


<h3>管理社交网络的图像应用程序</h3>

<p>KDE的图像查看器Gwenview，添加了一个“分享”按钮来将图片导出到流行的图片分享和社交网站。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-a03.png" alt="Gwenview can share images to many popular social networking sites" /></p>

<p>KSnapshot现在可以进行套索区域截屏，可以选择包括鼠标指针，还有“发送到”按钮可以及时将截屏进行分享。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-a04.png" alt="KSnapshot can directly export screenshots to a number of 3rd party services" /></p>

<p>许多其它 KDE 应用程序更新也带来了新的功能和修复了许多错误，同时也从 KDE 平台获得了最新的改进来增强速度和稳定x性。</p>

<h3>Marble带你回家，由于OpenGL，KStars渲染更快</h3>

<p>KDE的虚拟地球（Marble），继续因其改进的选路计划支持而发亮，现在也允许选路数据的下载。同时，它的移动版本MarbleToGo能进行路线规划导航。<a href="http://dot.kde.org">dot.kde.org</a>上有图片和视频，可以到这里找到功能指导的演示。</p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-a01.png" alt="Marble’s advanced routing can use a variety of configurable backends" /></p>

<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-a06.png" alt="The mobile version of Marble is a capable personal navigation tool" /></p>

<p>KDE 的桌面天文馆，具备了使用 OpenGL 来渲染的可选支持，以 OpenGL 的能力来在硬件傻瓜你增强性能。</p>

<h3>KDE游戏</h3>

<ul>
<li>Klickety，一个Clickomania游戏的改写版本，它也通过兼容模式取代了KSame。</li>
<li>KGameRenderer框架统一了游戏主题，带来了一致性和平滑的感观。大约十几个 KDE 游戏已经移植到了这个新的架构，减少了内存使用，已经允许它们利用多核处理器。</li>
<li>Palapeli新的剪贴猜谜游戏，将图像剪辑成不同的和看起来可信的小片，斜角效果使得这些小片呈现三维效果。</li>
<li>Kajongg新改进的文档为新手解释了这个游戏。更多的只能机器人玩家，改进的可用性和可玩性，由于更好的瓦片处理使得这个传统的游戏更好玩。</li>
</ul>


<p><img src="http://www.kde.org/announcements/4.6/screenshots/thumbs/46-a02.png" alt="Palapeli, the KDE puzzle game, makes it easy to create jigsaws from your own images" /></p>

<p>好了，关于 KDE 4.6 在应用程序方面的更新就介绍到这吧！</p>

<p>如果想知道如何安装使用KDE应用程序，请到<a href="http://www.kde.org">KDE</a>了解更多信息。</p>
]]></content>
  </entry>
  
</feed>
